name: Deploy Backend to Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-south1
  GAR_HOST: asia-south1-docker.pkg.dev
  SERVICE: legal-backend
  REPOSITORY: legal-backend
  IMAGE_NAME: legal-backend
  REGION: asia-south1

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth (WIF)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WIF_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Validate configuration
        run: |-
          echo "GAR_HOST=${{ env.GAR_HOST }}"
          echo "GAR_LOCATION=${{ env.GAR_LOCATION }}"
          echo "PROJECT_ID=${{ env.PROJECT_ID }}"
          echo "SERVICE=${{ env.SERVICE }}"
          echo "REPOSITORY=${{ env.REPOSITORY }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"
          if [ -z "${{ env.PROJECT_ID }}" ]; then
            echo "ERROR: PROJECT_ID is empty. Set the repo secret GCP_PROJECT_ID to your GCP project (e.g., demystifier-ai)." >&2
            exit 1
          fi

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_HOST }}

      # Step 1: Ensure the AR repository exists
      - name: Create Artifact Registry Repository
        run: |-
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.GAR_LOCATION }} \
            --description="Docker repository for ${{ env.REPOSITORY }}" || echo "Repository may already exist"

      # Step 2: Build and Push Container (FIX APPLIED)
      - name: Build and Push Container
        # Define the full image URL once, locally within this step
        env:
          IMAGE_URL: ${{ env.GAR_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |-
          cd backend
          echo "IMAGE_URL=$IMAGE_URL"
          # Build: Use the clean variable (must be HOST/PROJECT/REPOSITORY/IMAGE:TAG)
          docker build -t $IMAGE_URL .
          # Push: Use the clean variable. This fixes the "Missing image name" error.
          docker push $IMAGE_URL
          
      # Step 3: Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # Use the same logic to reference the image URL
          image: ${{ env.GAR_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
      # Step 4: Show Output
      - name: Show Output
        run: |
          echo "Cloud Run Service URL: ${{ steps.deploy.outputs.url }}"
        
      # Step 5: Test Deployment
      - name: Test Deployment
        run: |-
          curl -fsS ${{ steps.deploy.outputs.url }}/health